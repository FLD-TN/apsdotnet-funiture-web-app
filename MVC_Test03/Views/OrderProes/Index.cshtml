@using PagedList.Mvc;
@model PagedList.IPagedList<MVC_Test03.Models.OrderPro>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" type="text/css" href="~/Content/css/PagedList.css"/>
<style>

    .modal {
        display: none; /* Ẩn modal mặc định */
        position: fixed;
        z-index: 1000; /* Đặt trên cùng */
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Màu nền mờ */
    }

    /* Nội dung modal */
    .modal-content {
        position: relative;
        margin: 15% auto; /* Đặt giữa màn hình */
        padding: 20px;
        background-color: white;
        border-radius: 5px;
        width: 80%; /* Chiều rộng modal */
        max-width: 500px; /* Chiều rộng tối đa */
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); /* Đổ bóng */
    }

    /* Nút đóng */
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }


</style>
<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@*@if (TempData["Message"] != null)
    {
        <div class="alert alert-success">
            @Html.Raw(TempData["Message"])
        </div>
    }*@
@if (TempData["Message"] != null)
{
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <p>@Html.Raw(TempData["Message"])</p>
        </div>
    </div>

    <script>
        // Hiển thị modal khi có thông báo
        window.onload = function() {
            var modal = document.getElementById("myModal");
            var message = '@Html.Raw(TempData["Message"])';

            if (message) {
                modal.style.display = "block"; // Hiển thị modal
            }

            // Đóng modal khi nhấp vào nút đóng
            var span = document.getElementsByClassName("close")[0];
            span.onclick = function() {
                modal.style.display = "none"; // Ẩn modal
            }

            // Đóng modal khi nhấp ra ngoài modal
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none"; // Ẩn modal
                }
            }
        }
    </script>
}


<table class="table">
    <tr>
        @*<th>
                @Html.DisplayNameFor(model => model.DateOrder)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AddressDeliverry)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customer.NameCus)
            </th>
            <th></th>*@
        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().DateOrder)</th>
        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().AddressDeliverry)</th>
        <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Customer.NameCus)</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @*<td>
                    @Html.DisplayFor(modelItem => item.DateOrder)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AddressDeliverry)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Customer.NameCus)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                </td>*@
            <td>@Html.DisplayFor(modelItem => item.DateOrder)</td>
            <td>@Html.DisplayFor(modelItem => item.AddressDeliverry)</td>
            <td>@Html.DisplayFor(modelItem => item.Customer.NameCus)</td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID },new {@class="btn btn-success"}) 
                @Html.ActionLink("Details", "Details", new { id = item.ID }, new {@class="btn btn-primary"}) 
                @Html.ActionLink("Delete", "Delete", new { id = item.ID },new {@class="btn btn-danger"})

            </td>
        </tr>
    }

</table>
<!-- Hiển thị thông tin phân trang -->
<p style="display:flex; justify-content:center">
    Trang @(Model.PageNumber) / @Model.PageCount
</p>


@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }), new PagedListRenderOptions
{
    UlElementClasses = new[] { "pagination" },
    LiElementClasses = new[] { "page-item" },
    DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
    DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
    DisplayLinkToLastPage = PagedListDisplayMode.Always,
    Display = PagedListDisplayMode.IfNeeded,
    LinkToPreviousPageFormat = "Trước",
    LinkToNextPageFormat = "Tiếp",
    LinkToIndividualPageFormat = " {0}"
})